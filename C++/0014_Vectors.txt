Vectors
----------------------
Suppose we want to store test scores for my school.

I have no way of knowing how many students will register next year

Options:
    Pick a size that you are not likely to exceed and use static arrays.
                        OR
    Use a dynamic array such as  vector

Here comes the use of vectors.

What are vectors?
----------------------
Container in the C++ Standard Template Library

An array that can grow and shrink in size at execution time.

Provides similar semantics and syntax as arrays.

Very efficient

Can Provide bounds checking

Can use lots of cool functions like sort, reverse, find, and more.

Characteristics
----------------------
    Dynamic Size
    Elements are all the same type
    Stored contiguosly in memory
    Individual elements can be accessed by their position or index

    First element is at index 0
    Last element is at index size-1

    []-no checking to see if you are out of bounds
    Provides many useful functions to do the bound checks

    Element initialized to zero
    Very efficient
    Iteration (looping is often used to process)


Declaring Vectors
----------------------
    #include <vector>
    using namespace std;

    vector <char> vowels;
    vector <int> test_scores;

    vector <char> vowels (5); // a vector of character type containing 5 characters 
    vector <int> test_scores (10); // a vector of integer type containing 10 integer
                                // these integer will be automatically initialized to 0

    vector <char> vowels {'a','e','i','o','u'};
    vector <int> test_scores {100,94,32,32,64};

Accessing vector elements
-----------------------
using [] operator--
    vector_name [element_index]

    Eg:
        test_scores[1]

        vector <int> test_scores {100,95,48,22,94};
        cout << "First score at index 0 : " << test_scores[0] << endl;
        cout << "Second score at index 1 : " << test_scores[1] << endl;
        cout << "Third score at index 2 : " << test_scores[2] << endl;
        cout << "Fourth score at index 3 : " << test_scores[3] << endl;
        cout << "Fifth score at index 4 : " << test_scores[4] << endl;

using at()--
    vector_name.at(element_index)

    Eg:
        test_scores.at(1);

        vector <int> test_scores {100,95,48,22,94};
        cout << "First score at index 0 : " << test_scores.at(0) << endl;
        cout << "Second score at index 1 : " << test_scores.at(1) << endl;
        cout << "Third score at index 2 : " << test_scores.at(2) << endl;
        cout << "Fourth score at index 3 : " << test_scores.at(3) << endl;
        cout << "Fifth score at index 4 : " << test_scores.at(4) << endl;


Adding vector elements
------------------------------
    vector_name.push_back(element)

    Eg:
        vector <int> test_scores {100,95,99} //size is 3

        test_scores.push_back(80); // 100,95,99,80
        test_scores.push_back(90); // 100,95,99,80,90
    
    vector wil automatically allocate the required space


What if you are out of bounds
-------------------------------
    Arrays never do bounds checking 
    Many vector methods provide bounds checking 
    An exceoption and error message is generated