Namespaces
------------------------------------------
*Namespace provide the space where we can define or declare identifier i.e. variable,  method, classes.

*Using namespace, you can define the space or context in which identifiers are defined i.e. variable, method, classes. In essence, a namespace defines a scope.


Defining a Namespace:
-------------------------------------------
A namespace definition begins with the keyword namespace followed by the namespace name as follows:

    namespace  namespace_name 
    {
       // code declarations i.e. variable  (int a;)
       method (void add();)
       classes ( class student{};)
    }

It is to be noted that, there is no semicolon (;) after the closing brace.

To call the namespace-enabled version of either function or variable, prepend the namespace name as follows:

    namespace_name: :code;  
    // code could be variable , function or class.


The using directive:
--------------------------------------------------
You can also avoid prepending of namespaces with the using namespace directive. This directive tells the compiler that the subsequent code is making use of names in the specified namespace. 

The namespace is thus implied for the following code:
     #include <iostream>
     using namespace std;
     // first name space
     namespace first_space
     {
       void func()
       {
         cout << "Inside first_space" << endl;
       }
     }

     // second name space
     namespace second_space
     {
        void func()
        {
          cout << "Inside second_space" << endl;
        }
     }
     using namespace first_space;
     int main ()
     {
        // This calls function from first name space.
        func();
        return 0;
     }
    
Output : Inside first_space